1) Subset problems -> [1,2,3]

backtrack(0,[]) -> result = [[]]
i=0 -> subset= [1]
    -> backtrack(1,[1]) -> result = [[],[1]]
i=1 -> subset = [1,2]
    -> backtrack(2,[1,2]) -> result = [[],[1],[1,2]]
i=2 -> subset = [1,2,3]
    -> backtrack(3,[1,2,3]) -> result = [[],[1],[1,2],[1,2,3]]
    -> Loop Ends 3 > 3 is False

popSubset [1,2,3] -> [1,2] -> [1]

backtrack(1,[1]) -> 

i=2 -> subset = [1,3]
    -> backtrack(3,[1,3]) -> result = result = [[],[1],[1,2],[1,2,3],[1,3]]
    -> Loop Ends

pop subset [1,3] ->


2) Combination Sum 2 problems
     -> the backtracking recursive call should be backtrack(i+1) not backtrack(start+1)
     -> to avoid duplicates in the set we must use the below 
     -> if(i > start && candidates[i] === candidates[i-1]) continue;

